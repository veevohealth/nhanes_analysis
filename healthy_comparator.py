from bisect import bisect_left
from typing import Dict, Tuple


# Healthy SBP reference values by exact integer age and sex
HEALTHY_SBP_BY_SEX: Dict[str, Dict[int, float]] = {
    "male": {
        18: 115.66157580314723,
        19: 115.7841789688315,
        20: 115.90678213451577,
        21: 116.02938530020003,
        22: 116.1519884658843,
        23: 116.27459163156857,
        24: 116.39719479725284,
        25: 116.5197979629371,
        26: 116.64240112862137,
        27: 116.76500429430564,
        28: 116.88760745998991,
        29: 117.01021062567418,
        30: 117.13281379135844,
        31: 117.25541695704271,
        32: 117.37802012272698,
        33: 117.50062328841125,
        34: 117.62322645409552,
        35: 117.74582961977978,
        36: 117.86843278546405,
        37: 117.99103595114832,
        38: 118.11363911683259,
        39: 118.23624228251686,
        40: 118.35884544820112,
        41: 118.48144861388539,
        42: 118.60405177956966,
        43: 118.72665494525393,
        44: 118.8492581109382,
        45: 118.97186127662246,
        46: 119.09446444230673,
        47: 119.217067607991,
        48: 119.33967077367527,
        49: 119.46227393935953,
        50: 119.5848771050438,
        51: 119.70748027072807,
        52: 119.83008343641234,
        53: 119.9526866020966,
        54: 120.07528976778087,
        55: 120.19789293346514,
        56: 120.32049609914941,
        57: 120.44309926483368,
        58: 120.56570243051794,
        59: 120.68830559620221,
        60: 120.81090876188648,
        61: 120.93351192757075,
        62: 121.05611509325502,
        63: 121.17871825893928,
        64: 121.30132142462355,
        65: 121.42392459030782,
        66: 121.54652775599209,
        67: 121.66913092167636,
        68: 121.79173408736062,
        69: 121.91433725304489,
        70: 122.03694041872916,
        71: 122.15954358441343,
        72: 122.2821467500977,
        73: 122.40474991578196,
        74: 122.52735308146623,
        75: 122.6499562471505,
        76: 122.77255941283477,
        77: 122.89516257851903,
        78: 123.0177657442033,
        79: 123.14036890988757,
    },
    "female": {
        18: 105.2886737609358,
        19: 105.49069499293475,
        20: 105.69271622493369,
        21: 105.89473745693265,
        22: 106.0967586889316,
        23: 106.29877992093054,
        24: 106.5008011529295,
        25: 106.70282238492844,
        26: 106.9048436169274,
        27: 107.10686484892634,
        28: 107.30888608092529,
        29: 107.51090731292425,
        30: 107.71292854492319,
        31: 107.91494977692214,
        32: 108.11697100892108,
        33: 108.31899224092004,
        34: 108.52101347291898,
        35: 108.72303470491794,
        36: 108.92505593691689,
        37: 109.12707716891583,
        38: 109.32909840091479,
        39: 109.53111963291373,
        40: 109.73314086491268,
        41: 109.93516209691163,
        42: 110.13718332891058,
        43: 110.33920456090954,
        44: 110.54122579290848,
        45: 110.74324702490743,
        46: 110.94526825690637,
        47: 111.14728948890533,
        48: 111.34931072090427,
        49: 111.55133195290323,
        50: 111.75335318490218,
        51: 111.95537441690112,
        52: 112.15739564890008,
        53: 112.52215647661303,
        54: 112.88691730432599,
        55: 113.25167813203896,
        56: 113.61643895975192,
        57: 113.98119978746487,
        58: 114.34596061517783,
        59: 114.7107214428908,
        60: 115.07548227060376,
        61: 115.44024309831671,
        62: 115.80500392602968,
        63: 116.16976475374264,
        64: 116.5345255814556,
        65: 116.89928640916855,
        66: 117.26404723688152,
        67: 117.62880806459448,
        68: 117.99356889230744,
        69: 118.35832972002041,
        70: 118.72309054773336,
        71: 119.08785137544632,
        72: 119.45261220315928,
        73: 119.81737303087225,
        74: 120.1821338585852,
        75: 120.54689468629816,
        76: 120.91165551401113,
        77: 121.27641634172409,
        78: 121.64117716943704,
        79: 122.00593799715,
    },
}

_SORTED_AGES_BY_SEX: Dict[str, Tuple[int, ...]] = {
    "male": tuple(sorted(HEALTHY_SBP_BY_SEX["male"].keys())),
    "female": tuple(sorted(HEALTHY_SBP_BY_SEX["female"].keys())),
}


def healthy_sbp_for_age_and_sex(age: float, sex: str) -> float:
    """Return healthy comparator SBP for given age and sex with linear interpolation.

    Falls back to 110.0 mmHg if sex is unknown.
    Values are clamped to the min/max known ages per sex.
    """
    sex_key = (sex or "").strip().lower()
    table = HEALTHY_SBP_BY_SEX.get(sex_key)
    if not table:
        return 110.0
    ages = _SORTED_AGES_BY_SEX[sex_key]
    if age <= ages[0]:
        return table[ages[0]]
    if age >= ages[-1]:
        return table[ages[-1]]
    idx = bisect_left(ages, age)
    if idx < len(ages) and ages[idx] == age:
        return table[ages[idx]]
    lo_age = ages[idx - 1]
    hi_age = ages[idx]
    lo_val = table[lo_age]
    hi_val = table[hi_age]
    t = (age - lo_age) / (hi_age - lo_age)
    return lo_val + (hi_val - lo_val) * t


